#!/usr/bin/python
from Adafruit_MotorHAT import Adafruit_MotorHAT, Adafruit_DCMotor

import time, atexit, sys, curses
from math import atan2, sqrt, degrees

# create a default object, no changes to I2C address or frequency
mh = Adafruit_MotorHAT(addr=0x60)
lmotor = mh.getMotor(1)
rmotor = mh.getMotor(2)

# recommended for auto-disabling motors on shutdown!
def STOP():
	lmotor.run(Adafruit_MotorHAT.RELEASE)
	rmotor.run(Adafruit_MotorHAT.RELEASE)

atexit.register(STOP)

def DRIVE(lspd,rspd):
	# Left Motor Drive Speed
	if (lspd>0):
		lmotor.run(Adafruit_MotorHAT.FORWARD)
		lmotor.setSpeed(lspd)
	elif (lspd<0):
		lmotor.run(Adafruit_MotorHAT.BACKWARD)
		lmotor.setSpeed(-lspd)
	else:
		lmotor.run(Adafruit_MotorHAT.RELEASE)

	# Right Motor Drive Speed
	if (rspd>0):
		rmotor.run(Adafruit_MotorHAT.FORWARD)
		rmotor.setSpeed(rspd)
	elif (rspd<0):
		rmotor.run(Adafruit_MotorHAT.BACKWARD)
		rmotor.setSpeed(-rspd)
	else:
		rmotor.run(Adafruit_MotorHAT.RELEASE)

def GO(speed,steer):
	DRIVE(speed+steer,speed-steer)
	time.sleep(0.01);

def TurnLeft(degrees):
	for i in range(0,105,5):
		GO(i+1,i);
	time.sleep((degrees-50.0)/210.0)
	for i in reversed(range(0,105,5)):
		GO(i+1,i);
	STOP()

def GoDistance(cm):
	for i in range(50,100):
		GO(i,0);
	time.sleep((cm-19.3)/16.7)
	for i in reversed(range(50,100)):
		GO(i,0);
	STOP()

def GoToPoint(xtgt,ytgt):
	xnow=515
	ynow=350
	hdgnow=0

	hdgtgt=degrees(atan2((ytgt-ynow),(xtgt-xnow)))
	dhdg=hdgnow-hdgtgt
	print(hdgtgt);
	while dhdg<60:
		dhdg=dhdg+360
	TurnLeft(dhdg)
	dist=sqrt((xnow-xtgt)**2+(ynow-ytgt)**2)
	GoDistance(dist)




# Heading = degrees up(Y) above X
# Y
# ^
# |             E(90 deg)
# |             ^
# | (180 deg)S<-+->N(0 deg)
# |             v
# |             W(270 deg)
# +---------------------------->X
#


################################# DC motor test!
if (sys.argv[1]=='go'):
	GO(75,0)
elif (sys.argv[1]=='jump'):
	for i in reversed(range(50,75)):
		GO(i,0);
elif (sys.argv[1]=='longjump'):
	for i in reversed(range(50,150)):
		GO(i,0);
		time.sleep(0.1);
elif (sys.argv[1]=='stop'):
	STOP()
elif (sys.argv[1]=='loop'):
	GO(150,50)
elif (sys.argv[1]=='turnaround'):
	GO(0,150)
	time.sleep(1.40)
	STOP()
elif (sys.argv[1]=='accelerate'):
	atexit.register(STOP)
	for i in range(0,250):
		GO(i,0)
		time.sleep(0.05)
elif (sys.argv[1]=='angle'):
	TurnLeft(int(sys.argv[2]))
elif (sys.argv[1]=='distance'):
	GoDistance(int(sys.argv[2]))
elif (sys.argv[1]=='point'):
	GoToPoint(int(sys.argv[2]),int(sys.argv[3]))
elif (sys.argv[1]=='keyboard'):
	atexit.register(STOP)
	drive_speed=0
	drive_turn=0
	
	stdscr = curses.initscr()
	curses.cbreak()
	stdscr.keypad(1)

	stdscr.addstr(0,10,"Hit 'q' to quit")
	stdscr.refresh()

	key = ''
	while key != ord('q'):
		key = stdscr.getch()
		stdscr.addch(20,25,key)
		stdscr.refresh()
		if key == curses.KEY_UP: 
			if drive_speed<250:
				drive_speed=drive_speed+10
		elif key == curses.KEY_DOWN: 
			if drive_speed>-250:
				drive_speed=drive_speed-10
		elif key == curses.KEY_LEFT:
			if drive_turn>-100:
				drive_turn=drive_turn-5
		elif key == curses.KEY_RIGHT: 
			if drive_turn<100:
				drive_turn=drive_turn+5
		stdscr.addstr(2,20,"Speed: "+str(drive_speed)+"     ");
		stdscr.addstr(3,20,"Turn: "+str(drive_turn)+"     ");
		GO(drive_speed,drive_turn);
	curses.endwin()

